# -*- coding: utf-8 -*-
"""WindSpeedPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TXcS2qARoCREU7U2_UvptByxmUm388sg
"""
import joblib
from pandas import DataFrame
from pandas import Series
from pandas import concat
from pandas import read_csv
from pandas import datetime
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler
# from keras.models import Sequential
# from keras.layers import Dense
# from keras.layers import LSTM
from math import sqrt
from matplotlib import pyplot
import numpy as np
import pandas as pd

def timeseries_to_supervised(data, lag=1):
    df = DataFrame(data)
    columns = [df.shift(i) for i in range(1, lag+1)]
    columns.append(df)
    df = concat(columns, axis=1)
    df.fillna(0, inplace=True)
    return df

def difference(dataset, interval=1):
    diff = list()
    for i in range(interval, len(dataset)):
        value = dataset[i] - dataset[i - interval]
        diff.append(value)
    return Series(diff)

def inverse_difference(history, yhat, interval=1):
    return yhat + history[-interval]

def scale(data_norm):
    scaler = MinMaxScaler(feature_range=(-1, 1))
    scaler = scaler.fit(data_norm)
    # transform train
    data_norm = data_norm.reshape(data_norm.shape[0], data_norm.shape[1])
    data_scaled = scaler.transform(data_norm)
    return scaler, data_scaled

def invert_scale(scaler, X, value):
    new_row = [x for x in X] + [value]
    array = np.array(new_row)
    array = array.reshape(1, len(array))
    inverted = scaler.inverse_transform(array)
    return inverted[0, -1]

def forecast_lstm(model, batch_size, X):
    X = X.reshape(1, 1, len(X))
    #print(X)
    yhat = model.predict(X, batch_size=1)
    return yhat[0,0]

def predict_wind_speed():
  # Initialize some variables
  window_size = 48
  batch_size_exp = 1
  epoch_exp = 7
  neurons_exp = 10
  predict_values_exp = 72
  lag_exp=24

  # Load data file
  series = pd.read_csv('https://gist.githubusercontent.com/TechTarun/3497b164548f3c7d7a400b2af3c76fdf/raw/c7bf51de73fccec23ac7313129495cb3e8e2cfc4/winddata.csv',index_col="Date/Time")
  del series['LV ActivePower (kW)']
  del series['Wind Direction (Â°)']
  del series['Theoretical_Power_Curve (KWh)']
  print(series.head())

  # Preprocess the data
  raw_values = series.values
  diff_values = difference(raw_values, 1)

  # transform data to be supervised learning
  supervised = timeseries_to_supervised(diff_values, lag_exp)
  supervised_values = supervised.values

  # split data into train and test-sets
  scaler,supervised_values = scale(supervised_values)
  train_scaled, test_scaled = supervised_values[:], supervised_values[:]

  # Load the model
  wind_speed_lstm = joblib.load('WindSpeedLSTM.pkl')

  # walk-forward validation on the test data
  predictions = list()
  expectations = list()
  for i in range(len(test_scaled)-window_size):
      if i == 72:
          break
      window_prediction_frame = test_scaled
      test_pred = list()
      for j in range(window_size):
          X, y = window_prediction_frame[i, 0:-1], window_prediction_frame[i, -1]
          yhat = forecast_lstm(wind_speed_lstm, 1, X)#batch_size_exp to 1
          '''# Start Debug prints
          print("X: %", X)
          print("yhat: %", yhat)
          # End Debug prints'''
          # Replacing value in test scaled with the predicted value.
          test_pred = [yhat] + test_pred 
          if len(test_pred) > lag_exp+1:
              test_pred = test_pred[:-1]
          if j+1<len(window_prediction_frame):
              if j+1 > lag_exp+1:
                  window_prediction_frame[j+1] = test_pred
              else:
                  window_prediction_frame[j+1] = np.concatenate((test_pred, window_prediction_frame[j+1, j+1:]),axis=0)

      # invert scaling
      yhat = invert_scale(scaler, X, yhat)
      # invert differencing
      yhat = inverse_difference(raw_values, yhat, len(test_scaled)+1-i)
      # store forecast
      expected = raw_values[len(train_scaled) + i + 1-50519]
      predictions.append(yhat)
      expectations.append(expected)

  # Calculate the error
  expectations = np.array(expectations)
  predictions = np.array(predictions)
  print("Mean Absolute Percent Error(wind speed): ", (np.mean(np.abs((expectations - predictions) / expectations.mean()))*100))

  # line plot of observed vs predicted
  pyplot.plot(raw_values[:predict_values_exp], label="True")
  pyplot.plot(predictions, label="Predicted")
  pyplot.legend(loc='upper right')
  pyplot.xlabel("Number of hours")
  pyplot.ylabel("wind speed")
  pyplot.show()
  
############ main #############
def predict_wind_speed_main():
  predict_wind_speed()

  predictions.shape
  predictions.flatten('F')

  df = pd.read_csv('Future_Data.csv')
  df['Wind Speed (m/s)'] = predictions
  df.to_csv('Future_Data.csv')

